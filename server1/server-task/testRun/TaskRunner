
import java.util.concurrent.Semaphore;
// 这里后续最好结合线程池一起使用
@Slf4j
//@Component
public class TaskRunner implements ApplicationRunner {
    final Semaphore semaphore = new Semaphore(3);

 @Override
    public void run(ApplicationArguments args) throws Exception {

while (true) {

     try {
                    // 获取许可
             semaphore.acquire();
                    System.out.println( semaphore.availablePermits());
                    Thread thread = new Thread(() -> {
                       try {
                            System.out.println("线程 " + Thread.currentThread().getId() + " 获取到许可，开始执行任务 时间 "+ new Date());
                            // 模拟耗时操作  查库，如果没有待执行任务 则睡眠 2分钟
                         if(taskResult == null){
                                    Thread.sleep(120000);
                            }
                           
                      } catch (Exception e) {
                    System.out.println("线程 " + Thread.currentThread().getId() + " 线程执行失败 原因 "+ e);
                     } finally {
                        Thread.currentThread().interrupt();
                           // 释放许可
                            System.out.println("线程 " + Thread.currentThread().getId() + " 任务执行完毕，释放许可 时间 "+ new Date());
                              semaphore.release();
                        }
                  });
                    thread.start();
                 }catch (Exception e) {
                    e.printStackTrace();
                    // 释放许可
                         semaphore.release();
                     throw e;
                }

}
 }
}
